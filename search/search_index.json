{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Our goal with Munity is to make third part integration easiest as possible.</p> <p>But we don't want to trade simplicity to security. So we are based on strong security standards to keep your customer data safe as Vault, DRF, Kubernetes, TLS and more.</p> <p>To get many connectors out of the box we have Airbyte deep in our architecture, it is closed and nobody can access it from outside.</p>"},{"location":"#single-interface","title":"Single interface","text":"<p>With your API Key you can fetch your customer data, manage your account, ask user authorization and activate new connectors.</p> <p></p>"},{"location":"#credential-management","title":"Credential management","text":"<p>Your customer credentials are stored in Vault and cannot be access without a strong accreditation. We manage this security for you and renew tokens when needed.</p> <p></p>"},{"location":"#connector-family","title":"Connector family","text":"<p>To reach simplicity we bring togethere similar API on a single model.</p>"},{"location":"#exemple","title":"Exemple :","text":"<ul> <li>Project management : Jira, Wrike, Asana, Trello, Clickup....</li> <li>E-commerce : Shopify, Magento, Prestashop...</li> </ul> <p>Integrate once and get similar connectors in second.</p> <p></p>"},{"location":"about/","title":"About","text":"<p>Website : https://munityapps.com Discord : https://discord.gg/aY7sBn6wAJ</p> <p>Cyril ALFARO : cyril_at_munityapps.com Marisella PACHECO : marisella_at_munityapps.com Martin Perreau : martin_at_munityapps.com</p>"},{"location":"configure/","title":"Configure","text":""},{"location":"configure/#first-create-an-account","title":"First, create an account","text":"<p>You have to create your workspace and owner at register page</p> <p></p>"},{"location":"configure/#then-choose-and-configure-your-first-connector","title":"Then, choose and configure your first connector","text":"<p>Connectors need information to works correctly. There are three different ways to configure connectors.</p>"},{"location":"configure/#authenticate-by-oauth2","title":"Authenticate by Oauth2","text":"<p>You have to generate a new application on remote service to connect your users through Oauth2.</p> <p>Then your connector need your application <code>client_id</code> and <code>client_secret</code>.</p> <p></p>"},{"location":"configure/#authenticate-by-api-key","title":"Authenticate by API Key","text":"<p>You have to generate an API Key on remote service and copy paste it on your connector.</p>"},{"location":"configure/#authenticate-by-user-credentials","title":"Authenticate by User credentials","text":"<p>Some remote service need your user/password to provide there data.</p>"},{"location":"configure/#finally-get-your-api-key-and-certificate","title":"Finally, get your API Key and certificate","text":""},{"location":"configure/#for-your-backend-api-key","title":"For your backend : API Key","text":"<p>To fetch your customer data and interact with unified API from your backend your need an API Key.</p> <p>API Key are linked to your user and workspace. If your user has admin privilege it can read and write data. Users with user privilege can only read data.</p> <p>To generate an API Key go to your user admin page.</p> <p>This api key will be used as following on your request on munity unified API :</p> <pre><code>Authorization: X-Api-Key &lt;YOUR-API-KEY&gt;\n</code></pre> <p>Exemple with CURL :</p> <pre><code>curl -X GET 'https://api.munityapps.com/v1/customers/f87cc67d-b594-4407-a90d-b26cfdae8f14/pm-projects/' -H 'Authorization: X-Api-Key REM0aW39.NfO0123456789CNeHpF29wo'\n</code></pre>"},{"location":"configure/#for-your-frontend-certificate","title":"For your frontend : Certificate","text":"<p>Certificate is used to communicate from your frontend to Unified API. Indeed frontends are not secured so we have to encrypt exchanges.</p> <p>The only time to communicate with our API from your frontend is when you ask for user credentials.</p> <p>Our frontend library will make it easier, you only have to provide your <code>connector</code>, <code>secret</code> and a way to wait data, callback or promise.</p> <p>In next section we will check how to use frontend lib and use it.</p>"},{"location":"howtousebackend/","title":"Get acces to your customer data","text":""},{"location":"howtousebackend/#api-get-data-through-our-api","title":"API : Get data through our API","text":"<p>To communicate with API you need an API Key that you can manage on munity unified API website.</p> <p>You can find your api keys in your security page.</p> <p></p> <p>This api key will be used on the Authorization header:</p> <pre><code>Authorization: Api-Key &lt;YOUR-API-KEY&gt;\n</code></pre> <p>Exemple with CURL :</p> <pre><code>curl -X GET 'https://api.munityapps.com/v1/customers/f87cc67d-b594-4407-a90d-b26cfdae8f14/pm-projects/' -H 'Authorization: Api-Key REM0aW39.NfO0123456789CNeHpF29wo'\n</code></pre> <p>You can access to our swagger to read all endpoint, how to implement it and what format are all responses :</p> <p>Munity Unified API Swagger</p>"},{"location":"howtousebackend/#webhook-getting-alert-on-your-customer-data","title":"WEBHOOK : Getting alert on your customer data","text":"<p>Munity can keep you updated for all your customer. Provide one endpoints and all your user data flow will be send to you.</p> <p>You can add a webhook url here : your security page.</p>"},{"location":"howtousebackend/#integration_new_data_model","title":"integration_new_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"howtousebackend/#integration_updated_data_model","title":"integration_updated_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n    \"diff\": diff, // &lt;- A json that show differences from old and new model\n    \"data\": data, // &lt;- Full data of the updated data model\n},\n</code></pre>"},{"location":"howtousebackend/#integration_deleted_data_model","title":"integration_deleted_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is deleted from\n    \"resource_id\": id, // &lt;- the id for the resource deleted\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"howtousebackend/#database-get-data-directly-inside-database","title":"DATABASE : Get data directly inside database","text":"<p>You can also directly connect to your customer data here : Customer page.</p> <p>And click on <code>Show DB credentials</code>.</p>"},{"location":"howtousefrontend/","title":"How to use on frontend : get your customer data access","text":"<p>Since you want you customer data, you need that your customer grant access.</p> <p>We take care of the security so you don't have to store these credentials and we also manage the Oauth2 dance for you.</p>"},{"location":"howtousefrontend/#install-frontend-library","title":"Install frontend library","text":"<pre><code>npm install @munityapps/sdk-frontend\n</code></pre>"},{"location":"howtousefrontend/#use-frontend-library-to-connect-users","title":"Use frontend library to connect users","text":"<p>Javascript :</p> <pre><code>import { connect } from @munityapps/sdk-frontend\n\nconst promise = connect( connector, secret, callback)\n</code></pre> <p>Typescript:</p> <pre><code>import { connect } from @munityapps/sdk-frontend\n\nconst promise:Promise&lt;boolean&gt; = connect(\n  connector: string,\n  secret: string,\n  cb: ((data: { status: string; message: any}):void),\n  config: { [key: string]: string } = {}\n)\n</code></pre>"},{"location":"howtousefrontend/#-connector","title":"- <code>connector</code> :","text":"<p>It's a slug referring your connector (ex: <code>jira</code>).</p>"},{"location":"howtousefrontend/#-secret","title":"- <code>secret</code> :","text":"<p>Here a snippet to generate your <code>secret</code> in python:</p> <pre><code>import jwt\n\n# Certificate provided by Munity\ncertificate = \"-----BEGIN PRIVATE KEY-----[...]-----END PRIVATE KEY-----\\n\"\n\nsecret = jwt.encode({\"customer_id\": \"customer_1234\",\"workspace_id\": \"11111111-2222-3333-aaaa-eeeeeeeeeeee\", \"name\": \"optional name\"}, certificate, algorithm=\"RS256\")\n\n</code></pre> <p>You can find your certificate in your security page.</p> <p></p> <p>It's a JWT encoded with RS256 using your certificate provided by Munity. Your cetificate can be find here : admin page. You need to provide <code>workspace_id</code> and <code>customer_id</code> and optionaly the name of the connector in a json format.      - <code>workspace_id</code> is the ID of your workspace on Munity, you can find it here : admin page.     - <code>customer_id</code> is your internal id that you will use to find back the customer. It can contains letter and numbers only.     - (optional) <code>name</code>: a name to show the integration on your frontend for UI purpose.</p>"},{"location":"howtousefrontend/#-callback-optional","title":"- <code>callback</code> (optional)","text":"<p>The callback will be triggered when the connected integration sends a new event. The first parameter of the callback is a payload, and its value is:</p> <pre><code>    { \n        \"type\":  //&lt;-- can be 'error', 'READY' or 'IMPORT_DONE'.\n        \"message\":  //&lt;-- associated message if needed, useful for errors.\n    }\n</code></pre>"},{"location":"howtousefrontend/#-promise-return-by-connect-function","title":"- <code>promise</code> return by connect function","text":"<p>The function will return a Promise, indicating that it will resolve with a boolean value (true) when the integration is ready, or reject with an error object if any error occurs. <p>To handle the promise, you can use methods like .then() and .catch() or async/await syntax.</p> <p>Here's an example using .then() and .catch():</p> <pre><code>connect(connectorValue, secretValue, cbValue, configValue)\n  .then((result) =&gt; {\n    // Integration is ready, handle the success case\n    console.log('Integration is ready:', result);\n  })\n  .catch((error) =&gt; {\n    // Handle the error case\n    console.error('Error occurred:', error);\n  });\n</code></pre> <p>You can also use async/await syntax to handle the promise:</p> <pre><code>async function handleConnect() {\n  try {\n    const result = await connect(connectorValue, secretValue, cbValue, configValue);\n    // Integration is ready, handle the success case\n    console.log('Integration is ready:', result);\n  } catch (error) {\n    // Handle the error case\n    console.error('Error occurred:', error);\n  }\n}\n\nhandleConnect();\n</code></pre>"},{"location":"howtousefrontend/#how-to-restore-a-broken-integration-renew-credentials","title":"How to restore a broken integration (renew credentials)","text":"<p>There is an other fields that you can add in secret generation to specify that you want to update an integration credentials.</p> <pre><code>secret = jwt.encode({\"customer_id\": \"customer_1234\",\"workspace_id\": \"11111111-2222-3333-aaaa-eeeeeeeeeeee\", \"integration_id\": \"old_uuid\"}, certificate, algorithm=\"RS256\")\n</code></pre>"},{"location":"webhooks/","title":"Webhook Reference","text":"<p>You can add a webhook url here : your security page.</p> <p>On your endpoint we will send following webhooks.</p> <p>All webhook as following payload :</p> <pre><code>{\n    workspace_id='XXX' // &lt;- your workspace id \n    customer_id='XXX' // &lt;- your customer id provided durring to connect function \n    event=\"event_type_name\" // &lt;- there few different kind of event all listed below\n    state=\"integration_state\", // &lt;- your integration state provided durring to connect function, usefull to know which connection has been correctly made. Prevent creation collision. \n    payload={\"id\": self.id}, // &lt;- a payload dedicated to this event\n}\n</code></pre>"},{"location":"webhooks/#integration_new_data_model","title":"integration_new_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"webhooks/#integration_updated_data_model","title":"integration_updated_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n    \"diff\": diff, // &lt;- A json that show differences from old and new model\n    \"data\": data, // &lt;- Full data of the updated data model\n},\n</code></pre>"},{"location":"webhooks/#integration_deleted_data_model","title":"integration_deleted_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is deleted from\n    \"resource_id\": id, // &lt;- the id for the resource deleted\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"webhooks/#integration_installed","title":"integration_installed","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": integration.id, // &lt;- the integration id from where model is deleted from\n    \"connector_type\": integration.connector_type, // &lt;- connector type of the ingration, can be usefull\n    \"metadata\": integration.metadata, // &lt;- Some metadata of the ingration can be usefull to keep it saved on your side \n    \"state\": integration.external_state, &lt;- State provided at integration creation\n},\n</code></pre>"},{"location":"webhooks/#integration_import_done","title":"integration_import_done","text":"<p>Payload :</p> <pre><code>payload={\n    'id':integration.id, // &lt;- the integration id of the integration that just finished\n    'connector_type':integration.connector_type, // &lt;- connector type of the ingration, can be usefull\n},\n</code></pre>"},{"location":"webhooks/#integration_cannot_refresh_oauth_token","title":"integration_cannot_refresh_oauth_token","text":"<p>Payload :</p> <pre><code>    payload={\n        \"id\": self.id, // &lt;- where id is the integration id fixed\n        \"error\": err // &lt;- error message trigged by oauth refresh\n    },\n</code></pre>"},{"location":"webhooks/#integration_oauth_token_fixed","title":"integration_oauth_token_fixed","text":"<p>Payload :</p> <pre><code>    payload={\"id\": self.id}, // &lt;- where id is the integration id fixed\n</code></pre>"}]}