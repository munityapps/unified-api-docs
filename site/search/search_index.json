{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Our mission at Munity is to facilitate seamless third-party integrations, prioritizing ease of use without sacrificing security. To this end, we adhere to stringent security standards, ensuring the protection of your customer data with technologies like Vault, Django Rest Framework (DRF), Kubernetes, Transport Layer Security (TLS), and more.</p> <p>At the core of our architecture lies Airbyte open source ELT, enabling us to offer a wide array of connectors right out of the box. This component is securely encapsulated, preventing any external access and ensuring a high level of security.</p>"},{"location":"#single-interface-for-comprehensive-management","title":"Single Interface for Comprehensive Management","text":"<p>Utilize your API key to effortlessly:</p> <ul> <li>Retrieve customer data</li> <li>Manage your account settings</li> <li>Request user authorizations</li> <li>Activate new connectors</li> </ul> <p>This streamlined approach ensures you have all the tools necessary for efficient management in one place.</p> <p></p>"},{"location":"#credential-management-secure-and-hassle-free","title":"Credential Management: Secure and Hassle-Free","text":"<p>We take the security of your customer credentials seriously. Stored securely in Vault, access is tightly controlled and requires strong authentication. Our system automatically handles the security, including token renewals, so you don't have to worry about it.</p> <p></p>"},{"location":"#connector-family-simplifying-integration-across-services","title":"Connector Family: Simplifying Integration Across Services","text":"<p>Our platform simplifies the integration process by grouping similar APIs into a single model, making it easier for you to connect with various services. This approach allows for a one-time integration with access to a wide range of similar connectors.</p>"},{"location":"#examples-include","title":"Examples include:","text":"<ul> <li>E-commerce/ERP (e.g., Prestashop, Shopify, WooCommerce...)</li> <li>CRM/VoIP (e.g., HubSpot, Salesforce, Zoho, Twilio...)</li> <li>Project management (e.g., Jira, Asana, Monday...)</li> <li>HRIS (e.g., Lucca, Factorial, Bamboo HR...)</li> </ul>"},{"location":"#integrate-once-and-gain-access-to-a-multitude-of-similar-connectors-instantly-streamlining-your-workflow-and-enhancing-efficiency","title":"Integrate once, and gain access to a multitude of similar connectors instantly, streamlining your workflow and enhancing efficiency.","text":""},{"location":"about/","title":"About","text":"<p>Website : https://munityapps.com Discord : https://discord.gg/aY7sBn6wAJ</p> <p>Cyril ALFARO : cyril_at_munityapps.com Marisella PACHECO : marisella_at_munityapps.com Martin Perreau : martin_at_munityapps.com</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#step-1-create-an-account","title":"Step 1: Create an Account","text":"<p>You need to create an account by logging into the platform.</p> <p></p>"},{"location":"getting-started/#step-2-create-marketplace","title":"Step 2: Create marketplace","text":"<p>Marketplaces are where connectors reside. Create a marketplace for each project that requires access to your customer's company data.</p>"},{"location":"getting-started/#step-21-create-your-first-marketplace","title":"Step 2.1: Create your first marketplace","text":""},{"location":"getting-started/#step-22-choose-connectors-to-create-your-marketplace","title":"Step 2.2: Choose connectors to create your marketplace","text":""},{"location":"getting-started/#step-3-create-connections","title":"Step 3: Create connections","text":"<p>A connection is a link between Munity and your customer's company data.</p>"},{"location":"getting-started/#step-31-create-connection-manually","title":"Step 3.1: Create connection manually","text":""},{"location":"getting-started/#step-32-or-ask-your-users-to-create-connections-on-their-own","title":"Step 3.2: Or Ask your users to create connections on their own","text":"<p>You need to add a \"Connect\" button on your saas to ask your customer's company data.</p> <ol> <li>Navigate to the publish button.</li> <li>Integrate the Munity library into your platform.</li> <li>Inform us about the company_id associated with a customer, specify the connector, and then request a code snippet.</li> <li>Copy and paste the provided snippet. You can customize the style according to your requirements.</li> </ol> <p></p>"},{"location":"getting-started/#step-4-access-to-your-customers-company-data","title":"Step 4 : Access to your customer's company data.","text":"<p>You can access your customer's company data in four differents ways :</p>"},{"location":"getting-started/#1-munity-api","title":"1. Munity API","text":"<p>Use an API key and our API. You find our API reference here. To generate an API Key go to your workspace settings.</p> <p></p>"},{"location":"getting-started/#2-connect-to-your-customers-company-database","title":"2. Connect to your customer's company database","text":"<p>Munity generates a dedicated database for each of your customers. You can connect to this database directly using any tool of your choice.</p> <p>You can locate the credentials on the Company page.</p> <p></p>"},{"location":"getting-started/#3-webhook-alerts","title":"3. Webhook alerts","text":"<p>Munity can notify you when new data is received from your customer, when existing data is updated, or when data is deleted.</p> <p>To enable this feature, you need to provide a 'Webhook URL' to your marketplace, and Munity will send you alerts accordingly.</p> <p>Refer to the 'Webhook reference' section to learn how webhooks are structured.</p>"},{"location":"getting-started/#4-integrate-a-no-code-service-like-xano","title":"4. Integrate a no-code service like Xano","text":"<p>Lastly, you can integrate a no-code solution with your marketplace, allowing Munity to populate your customer's company data directly into it.</p>"},{"location":"howtousebackend/","title":"Access your customer data","text":""},{"location":"howtousebackend/#api-retrieve-data-via-our-api","title":"API: Retrieve Data via Our API","text":"<p>To interact with our API, you'll need an API Key, which can be managed on the Munity Unified API website.</p> <p>You can find your API keys on workspace settings.</p> <p>API Manage</p> <p>This API key should be included in the Authorization header:</p> <pre><code>Authorization: Api-Key &lt;YOUR-API-KEY&gt;\n</code></pre> <p>Example using CURL:</p> <pre><code>curl -X GET 'https://api.munityapps.com/v1/customers/f87cc67d-b594-4407-a90d-b26cfdae8f14/pm-projects/' -H 'Authorization: Api-Key YOUR_ACTUAL_API_KEY_HERE'\n</code></pre> <p>Access our Swagger documentation to view all endpoints, implementation methods, and response formats:</p> <p>Munity Unified API Swagger Documentation</p>"},{"location":"howtousebackend/#webhook-getting-alert-on-your-customer-data","title":"WEBHOOK : Getting alert on your customer data","text":"<p>Munity can keep you updated for all your customer. Provide one endpoints and all your user data flow will be send to you.</p> <p>You can add a webhook url in your marketplace settings :</p> <p>Webhook list are available here : Webhook Reference</p>"},{"location":"howtousebackend/#database-get-data-directly-inside-database","title":"DATABASE : Get data directly inside database","text":"<p>You can also directly connect to your customer's company data here by connecting to there database. You can have access to there DB credential in your marketplace.</p>"},{"location":"howtousefrontend/","title":"Use frontend SDK","text":"<p>Since you desire access to your customer's company data, it's necessary for your customer to grant permission.</p> <p>We handle security measures, eliminating the need for you to store these credentials. Additionally, we manage the OAuth2 authentication process on your behalf.</p>"},{"location":"howtousefrontend/#install-frontend-library","title":"Install frontend library","text":"<pre><code>npm install @munityapps/sdk-frontend\n</code></pre>"},{"location":"howtousefrontend/#use-frontend-library-to-connect-users","title":"Use frontend library to connect users","text":"<p>To request credentials from your users, you should call the connect function provided by the Munity SDK.</p> <p>Javascript :</p> <pre><code>import { connect } from @munityapps/sdk-frontend\n\nconst promise = connect( connector, secret, callback)\n</code></pre> <p>Typescript:</p> <pre><code>import { connect } from @munityapps/sdk-frontend\n\nconst promise:Promise&lt;boolean&gt; = connect(\n  connector: string,\n  secret: string,\n  cb: ((data: { status: string; message: any}):void),\n  config: { [key: string]: string } = {}\n)\n</code></pre> <p>The parameters are detailed below.</p>"},{"location":"howtousefrontend/#-connector","title":"- <code>connector</code> :","text":"<p>Please specify the connector's name (e.g., jira) to refer to your particular connector.</p>"},{"location":"howtousefrontend/#-secret","title":"- <code>secret</code> :","text":"<p>To generate your secret key, utilize the Python snippet provided below. This script uses the jwt library to encode a JSON Web Token (JWT) with the RS256 algorithm, leveraging a certificate provided by Munity. </p> <pre><code>import jwt\n\n# Munity-provided certificate\ncertificate = \"-----BEGIN PRIVATE KEY-----[...]-----END PRIVATE KEY-----\\n\"\n\n# Generate the secret\nsecret = jwt.encode({\n    \"customer_id\": \"customer_1234\",\n    \"workspace_id\": \"11111111-2222-3333-aaaa-eeeeeeeeeeee\",\n    \"name\": \"optional name\"  # This field is optional\n}, certificate, algorithm=\"RS256\")\n</code></pre> <p>You will find the necessary certificate within your workspace settings, as illustrated below:</p> <p></p> <p>This secret key is a JWT, encoded using the RS256 algorithm and your Munity-provided certificate. You can retrieve your certificate from the admin page. When encoding your JWT, you need to include the workspace_id and customer_id. Optionally, you can also specify a name for the connector. The details for these parameters are as follows:</p> <ul> <li>workspace_id: This is the unique identifier for your workspace on Munity. You can locate this ID on the admin page.</li> <li>customer_id: This identifier is used internally to reference the customer. It should only contain letters and numbers.</li> <li>name (optional): This parameter allows you to specify a name for the integration, which can be useful for display purposes on your frontend UI.</li> </ul>"},{"location":"howtousefrontend/#-callback-optional","title":"- <code>callback</code> (optional)","text":"<p>The callback function is optionally invoked when the connected integration emits a new event. The function receives a payload as its first parameter, structured as follows:</p> <pre><code>    { \n        \"type\":  //&lt;-- can be 'error', 'READY' or 'IMPORT_DONE'.\n        \"message\":  //&lt;-- associated message if needed, useful for errors.\n    }\n</code></pre>"},{"location":"howtousefrontend/#-promise-return-by-connect-function","title":"- <code>promise</code> return by connect function","text":"<p>The connect function returns a Promise. This promise resolves with a boolean value (true) once the integration is successfully ready, or it rejects with an error object in case of failure. <p>To manage the promise, you can employ .then() and .catch() methods or the async/await syntax.</p> <p>Using .then() and .catch():</p> <pre><code>connect(connectorValue, secretValue, cbValue, configValue)\n  .then((result) =&gt; {\n    // Integration is ready, handle the success case\n    console.log('Integration is ready:', result);\n  })\n  .catch((error) =&gt; {\n    // Handle the error case\n    console.error('Error occurred:', error);\n  });\n</code></pre> <p>Handling with async/await Syntax:</p> <pre><code>async function handleConnect() {\n  try {\n    const result = await connect(connectorValue, secretValue, cbValue, configValue);\n    // Integration is ready, handle the success case\n    console.log('Integration is ready:', result);\n  } catch (error) {\n    // Handle the error case\n    console.error('Error occurred:', error);\n  }\n}\n\nhandleConnect();\n</code></pre>"},{"location":"howtousefrontend/#renewing-credentials-for-a-broken-integration","title":"Renewing Credentials for a Broken Integration","text":"<p>To update the credentials of an existing integration, you can include an additional field in your secret generation process. This field, integration_id, should contain the UUID of the integration you wish to update:</p> <pre><code>secret = jwt.encode({\n    \"customer_id\": \"customer_1234\",\n    \"workspace_id\": \"11111111-2222-3333-aaaa-eeeeeeeeeeee\",\n    \"integration_id\": \"old_uuid\"  // Specify the integration to update\n}, certificate, algorithm=\"RS256\")\n</code></pre> <p>This approach allows for seamless updating of integration credentials, ensuring continuous operation without manual intervention.</p>"},{"location":"webhooks/","title":"Webhook Reference","text":"<p>You can add a webhook url here : your security page.</p> <p>On your endpoint we will send following webhooks.</p> <p>All webhook as following payload :</p> <pre><code>{\n    workspace_id='XXX' // &lt;- your workspace id \n    customer_id='XXX' // &lt;- your customer id provided durring to connect function \n    event=\"event_type_name\" // &lt;- there few different kind of event all listed below\n    state=\"integration_state\", // &lt;- your integration state provided durring to connect function, usefull to know which connection has been correctly made. Prevent creation collision. \n    payload={\"id\": self.id}, // &lt;- a payload dedicated to this event\n}\n</code></pre>"},{"location":"webhooks/#webhook_test","title":"webhook_test","text":"<p>Payload :</p> <pre><code>payload={\n    \"test\": true\n}\n</code></pre>"},{"location":"webhooks/#integration_new_data_model","title":"integration_new_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"webhooks/#integration_updated_data_model","title":"integration_updated_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is comming from\n    \"resource_id\": id, // &lt;- the new id for the resource\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n    \"diff\": diff, // &lt;- A json that show differences from old and new model\n    \"data\": data, // &lt;- Full data of the updated data model\n},\n</code></pre>"},{"location":"webhooks/#integration_deleted_data_model","title":"integration_deleted_data_model","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": self.id, // &lt;- the integration id from where model is deleted from\n    \"resource_id\": id, // &lt;- the id for the resource deleted\n    \"type\": modal_name, // &lt;- the kind of resource, it depends on your data mapping\n},\n</code></pre>"},{"location":"webhooks/#integration_installed","title":"integration_installed","text":"<p>Payload :</p> <pre><code>payload={\n    \"id\": integration.id, // &lt;- the integration id from where model is deleted from\n    \"connector_type\": integration.connector_type, // &lt;- connector type of the ingration, can be usefull\n    \"metadata\": integration.metadata, // &lt;- Some metadata of the ingration can be usefull to keep it saved on your side \n    \"state\": integration.external_state, &lt;- State provided at integration creation\n},\n</code></pre>"},{"location":"webhooks/#integration_import_done","title":"integration_import_done","text":"<p>Payload :</p> <pre><code>payload={\n    'id':integration.id, // &lt;- the integration id of the integration that just finished\n    'connector_type':integration.connector_type, // &lt;- connector type of the ingration, can be usefull\n},\n</code></pre>"},{"location":"webhooks/#integration_cannot_refresh_oauth_token","title":"integration_cannot_refresh_oauth_token","text":"<p>Payload :</p> <pre><code>    payload={\n        \"id\": self.id, // &lt;- where id is the integration id fixed\n        \"error\": err // &lt;- error message trigged by oauth refresh\n    },\n</code></pre>"},{"location":"webhooks/#integration_oauth_token_fixed","title":"integration_oauth_token_fixed","text":"<p>Payload :</p> <pre><code>    payload={\"id\": self.id}, // &lt;- where id is the integration id fixed\n</code></pre>"}]}